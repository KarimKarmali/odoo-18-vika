#!/usr/bin/env python3
"""
Limpar refer√™ncias ao dashboard apagado
Remove todas as refer√™ncias ao dashboard ID 6 que foi apagado
"""

import xmlrpc.client

# Configura√ß√µes de conex√£o
ODOO_URL = 'http://localhost:8069'
ODOO_DB = 'vk_dev'
ODOO_USERNAME = 'admin'
ODOO_PASSWORD = 'admin'

def connect_odoo():
    """Conectar ao Odoo via XML-RPC"""
    try:
        common = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/common')
        uid = common.authenticate(ODOO_DB, ODOO_USERNAME, ODOO_PASSWORD, {})
        
        if not uid:
            print("‚ùå Erro na autentica√ß√£o!")
            return None, None, None
            
        models = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/object')
        print(f"‚úÖ Conectado ao Odoo como usu√°rio ID: {uid}")
        return common, models, uid
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return None, None, None

def clean_dashboard_references():
    """Limpar todas as refer√™ncias ao dashboard apagado"""
    print("\nüßπ Limpando refer√™ncias ao dashboard apagado...")
    print("=" * 60)
    
    common, models, uid = connect_odoo()
    if not models:
        return
    
    try:
        # 1. Limpar a√ß√£o padr√£o do usu√°rio se for o dashboard apagado
        print("üîç Verificando a√ß√£o padr√£o do usu√°rio...")
        user_action = models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
            'res.users', 'read', [uid], {'fields': ['action_id']})
        
        if user_action and user_action[0].get('action_id'):
            action_id = user_action[0]['action_id'][0]
            print(f"   A√ß√£o atual do usu√°rio: {action_id}")
            
            # Verificar se √© uma a√ß√£o do dashboard ninja
            try:
                action_data = models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
                    'ir.actions.act_window', 'read', [action_id], {'fields': ['res_model']})
                
                if action_data and action_data[0].get('res_model') == 'ks_dashboard_ninja.board':
                    print("   ‚ö†Ô∏è  A√ß√£o do usu√°rio aponta para dashboard ninja - limpando...")
                    models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
                        'res.users', 'write', [uid], {'action_id': False})
                    print("   ‚úÖ A√ß√£o padr√£o do usu√°rio limpa")
                else:
                    print("   ‚úÖ A√ß√£o do usu√°rio n√£o √© problem√°tica")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao verificar a√ß√£o - limpando por seguran√ßa: {e}")
                models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
                    'res.users', 'write', [uid], {'action_id': False})
                print("   ‚úÖ A√ß√£o padr√£o do usu√°rio limpa")
        
        # 2. Verificar se existem dashboards √≥rf√£os
        print("\nüîç Verificando dashboards existentes...")
        dashboards = models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
            'ks_dashboard_ninja.board', 'search_read', [[]], {'fields': ['id', 'name']})
        
        if dashboards:
            print(f"   üìä Encontrados {len(dashboards)} dashboards:")
            for dashboard in dashboards:
                print(f"      - ID {dashboard['id']}: {dashboard['name']}")
        else:
            print("   üìä Nenhum dashboard encontrado")
        
        # 3. Limpar widgets √≥rf√£os (se existirem)
        print("\nüîç Verificando widgets √≥rf√£os...")
        orphan_widgets = models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
            'ks_dashboard_ninja.item', 'search', [['ks_dashboard_ninja_board_id', '=', 6]])
        
        if orphan_widgets:
            print(f"   üóëÔ∏è  Encontrados {len(orphan_widgets)} widgets √≥rf√£os - removendo...")
            models.execute_kw(ODOO_DB, uid, ODOO_PASSWORD,
                'ks_dashboard_ninja.item', 'unlink', [orphan_widgets])
            print("   ‚úÖ Widgets √≥rf√£os removidos")
        else:
            print("   ‚úÖ Nenhum widget √≥rf√£o encontrado")
        
        print("\n" + "=" * 60)
        print("‚úÖ LIMPEZA CONCLU√çDA!")
        print("üéØ O sistema est√° limpo e pronto para uso")
        print("üìä Dashboard Ninja funcionando normalmente")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erro durante a limpeza: {e}")

if __name__ == "__main__":
    clean_dashboard_references()
